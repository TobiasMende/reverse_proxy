# vim: sw=4 ts=4 ft=nginx
# {{ ansible_managed }}

{% from "macros.j2" import build_domain_list_for_domains, build_domain_list with context %}

{%- for target in proxy_domains -%}
{% for domains in target.served_domains %}
# {{ target.target_host }}
#  authentication: {% if target.auth|default(False) -%} enabled {%- else -%} disabled {%- endif %}{{ '' }}
#  description: {{ target.target_description }}
server {
	ssl on;
	charset utf-8;
	listen 443 ssl;

	server_name {{- build_domain_list_for_domains( domains, ' ' ) -}};

	ssl_certificate     /etc/letsencrypt/live/{{- build_domain_list_for_domains( domains, ' ' ).split(' ')[1] -}}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{- build_domain_list_for_domains( domains, ' ' ).split(' ')[1] -}}/privkey.pem;

	location / {
		add_header Strict-Transport-Security "max-age={{ hsts_max_age }}; includeSubDomains; preload" always;
		proxy_pass        http://{{ target.target_ip }};
		proxy_redirect    off;
		proxy_set_header  Host               {{ target.target_ip }};
		proxy_set_header  X-Real-IP          $remote_addr;
		proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
		proxy_set_header  X-Forwarded-Proto  $scheme;
		proxy_set_header  X-Forwarded-Port   $server_port;

{% if domains.auth|default(False) %}
		auth_pam              "Admins Only";
		auth_pam_service_name "pam_unix";
{% endif %}
	}

	error_page 502 @defaultHost;
	location @defaultHost {
		if ($http_user_agent !~ "Encrypt validation server" ) {
			add_header Strict-Transport-Security "max-age={{ hsts_max_age }}; includeSubDomains; preload" always; #lets encrypt has to be excluded from hsts
		}
		return 302 {{default_url|default('http://example.com')}};
	}
}

{% endfor %}
{%- endfor -%}
